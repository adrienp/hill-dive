// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["paper", "jquery"], function(paper, $) {
    var Canvas, Matrix, Path, Point;
    Path = paper.Path;
    Point = paper.Point;
    Matrix = paper.Matrix;
    return Canvas = (function() {

      function Canvas(canvasId, path, flyers) {
        var flyer, _i, _len, _ref;
        this.path = path;
        this.flyers = flyers;
        this.resize = __bind(this.resize, this);

        paper.setup(canvasId);
        this.view = paper.view;
        this.$window = $(window);
        this.drawPath = new Path();
        this.drawPath.strokeColor = 'black';
        this.drawPath.strokeWidth = 0.05;
        this.drawPath.addSegments(this.path.getPoints());
        _ref = this.flyers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          flyer = _ref[_i];
          flyer.drawPath = new Path.Circle(flyer.pos, 0.1);
          flyer.drawPath.fillColor = 'red';
        }
        this.focus = this.flyers[0];
        this.resize();
        this.$window.resize(this.resize);
        this.view.draw();
        window.v = this.view;
      }

      Canvas.prototype.resize = function() {
        var windowSize;
        windowSize = new Point(this.$window.width() - 2, this.$window.height() - 2);
        this.view.setViewSize(windowSize);
        return this.draw();
      };

      Canvas.prototype.setFrame = function(centerX, bottom, top) {
        var height;
        height = this.view.getViewSize().getHeight();
        this.view.setCenter(new Point(centerX, (top + bottom) / 2));
        return this.view.setZoom(height / (bottom - top));
      };

      Canvas.prototype.draw = function() {
        var bottom, buffer, flyer, top, _i, _len, _ref;
        _ref = this.flyers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          flyer = _ref[_i];
          flyer.drawPath.setPosition(flyer.pos);
        }
        top = Math.min(this.focus.pos.y, this.path.range.top);
        bottom = this.path.range.bottom;
        buffer = (bottom - top) * 0.3;
        top -= buffer;
        bottom += buffer;
        return this.setFrame(this.focus.pos.x, bottom, top);
      };

      return Canvas;

    })();
  });

}).call(this);
