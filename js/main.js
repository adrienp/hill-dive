// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  require.config({
    paths: {
      jquery: "lib/jquery-1.8.3",
      goog: "/_ah/channel/jsapi?",
      backbone: "lib/backbone",
      underscore: "lib/underscore",
      paper: "lib/paper"
    },
    shim: {
      goog: {
        exports: "goog"
      },
      paper: {
        exports: "paper"
      },
      underscore: {
        exports: "_"
      }
    }
  });

  require(["jquery", "canvas", "channel", "randpath", "game"], function($, Canvas, Channel, RandPath, Game) {
    var Main, main;
    Main = (function() {

      function Main() {
        this.joinGame = __bind(this.joinGame, this);

        this.newGameBtn = __bind(this.newGameBtn, this);

        this.nameSubmit = __bind(this.nameSubmit, this);

        this.startGame = __bind(this.startGame, this);

        this.newGameSubmit = __bind(this.newGameSubmit, this);

        this.doneBtn = __bind(this.doneBtn, this);

        this.refreshGames = __bind(this.refreshGames, this);
        $('#name-form').on("submit", this.nameSubmit);
        $('#new-game-btn').on("click", this.newGameBtn);
        $('#game-list').on("click", ".join", this.joinGame);
        $('#refresh-games-btn').on("click", this.refreshGames);
        $('#new-game-form').on("submit", this.newGameSubmit);
        $('#start-btn').on("click", this.startGame);
        $('#done-btn').on("click", this.doneBtn);
        this.canvas = new Canvas('game');
        this.$games = {};
      }

      Main.prototype.panel = function(id) {
        if (id) {
          $('#panel > div').removeClass('current');
          return $("#" + id).addClass('current');
        } else {
          return $('#panel').hide();
        }
      };

      Main.prototype.make$Game = function(game) {
        return $("<li><button class='join' data-gid='" + game.gid + "'>Join</button> " + game.name + "</li>");
      };

      Main.prototype.refreshGames = function() {
        var _this = this;
        return $.get("/games", function(games) {
          var $game, game, _i, _len, _results;
          $('#game-list').empty();
          _this.$games = {};
          _results = [];
          for (_i = 0, _len = games.length; _i < _len; _i++) {
            game = games[_i];
            $game = _this.make$Game(game);
            _this.$games[game.gid] = $game;
            _results.push($('#game-list').append($game));
          }
          return _results;
        });
      };

      Main.prototype.doneBtn = function() {
        this.panel("games");
        return this.refreshGames();
      };

      Main.prototype.newGameSubmit = function(e) {
        var data, freq, height, length, name, path,
          _this = this;
        e.preventDefault();
        this.panel("loading");
        name = $('#game-name-txt').val();
        length = parseFloat($('#length-num').val());
        height = parseFloat($('#height-num').val());
        freq = parseFloat($('#freq-num').val());
        path = RandPath.make(length, height, freq, freq / 30);
        data = {
          yvals: path.yvals,
          left: path.start,
          freq: path.freq,
          step: path.step
        };
        return $.post("/games", {
          name: name,
          host: this.user.uid,
          data: JSON.stringify(data)
        }, function(game) {
          if (!game.success) {
            console.error(game.msg);
            return _this.panel("games");
          } else {
            _this.game = new Game(game.gid, _this.user, path, _this.channel, _this.canvas);
            return _this.gotoGameRoom(game);
          }
        });
      };

      Main.prototype.startGame = function() {
        var _this = this;
        this.panel("loading");
        return $.post("/games/" + this.game.gid + "/start", {
          uid: this.user.uid
        }, function(resp) {
          if (!resp.success) {
            console.error(resp.msg);
            return _this.panel("game-room");
          }
        });
      };

      Main.prototype.nameSubmit = function(e) {
        var name,
          _this = this;
        e.preventDefault();
        this.panel("loading");
        name = $('#name-txt').val();
        this.channel = new Channel(name, function(user) {
          _this.user = user;
          _this.panel("games");
          return _this.refreshGames();
        });
        this.channel.on("join", function(user) {
          $('#members').append("<li>" + user.name + "</li>");
          return _this.game.addFlyer(user);
        });
        this.channel.on("gameCreate", function(game) {
          var $game;
          $game = _this.make$Game(game);
          _this.$games[game.gid] = $game;
          return $("#game-list").append($game);
        });
        return this.channel.on("gameStart", function(game) {
          var $game;
          $game = _this.$games[game.gid];
          $game.remove();
          return delete _this.$games[game.gid];
        });
      };

      Main.prototype.newGameBtn = function() {
        return this.panel("new-game");
      };

      Main.prototype.gotoGameRoom = function(game) {
        var name, user, _i, _len, _ref, _results;
        this.panel("game-room");
        $('#game-name').html(game.name);
        $('#members').empty();
        _ref = game.users;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          user = _ref[_i];
          name = user.split(":")[0];
          _results.push($('#members').append("<li>" + name + "</li>"));
        }
        return _results;
      };

      Main.prototype.joinGame = function(e) {
        var $target, gid,
          _this = this;
        this.panel("loading");
        $target = $(e.target);
        gid = $target.data('gid');
        return $.post("/games/" + gid + "/join", {
          uid: this.user.uid
        }, function(game) {
          var u, user, _i, _len, _ref;
          if (!game.success) {
            _this.refreshGames();
            return console.error(game.msg);
          } else {
            _this.game = new Game(game.gid, _this.user, game.data, _this.channel, _this.canvas);
            _ref = game.users;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              user = _ref[_i];
              if (user !== _this.user.uid) {
                u = {
                  uid: user,
                  name: user.split(":")[0]
                };
                _this.game.addFlyer(u);
              }
            }
            return _this.gotoGameRoom(game);
          }
        });
      };

      return Main;

    })();
    return main = new Main();
  });

}).call(this);
