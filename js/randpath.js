// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(['path', 'underscore', 'paper'], function(Path, _, paper) {
    var RandPath;
    return RandPath = (function(_super) {

      __extends(RandPath, _super);

      function RandPath(yvals, left, freq, step) {
        var cubic, func, grad, right,
          _this = this;
        this.yvals = yvals;
        this.freq = freq;
        right = left + (this.yvals.length - 1) * freq;
        cubic = function(x) {
          var i, m1, m2, p0, p1, p2, p3;
          i = Math.floor((x - left) / freq);
          x -= i * freq;
          x /= freq;
          p0 = _this.yval(i - 1);
          p1 = _this.yval(i);
          p2 = _this.yval(i + 1);
          p3 = _this.yval(i + 2);
          m1 = (p2 - p0) / 2;
          m2 = (p3 - p1) / 2;
          return {
            a: 2 * p1 - 2 * p2 + m1 + m2,
            b: -3 * p1 + 3 * p2 - 2 * m1 - m2,
            c: m1,
            d: p1,
            x: x
          };
        };
        func = function(x) {
          var a, b, c, d, _ref;
          _ref = cubic(x), a = _ref.a, b = _ref.b, c = _ref.c, d = _ref.d, x = _ref.x;
          return (a * x * x * x) + (b * x * x) + (c * x) + d;
        };
        grad = function(x) {
          var a, b, c, d, _ref;
          _ref = cubic(x), a = _ref.a, b = _ref.b, c = _ref.c, d = _ref.d, x = _ref.x;
          return ((3 * a * x * x) + (2 * b * x) + c) / freq;
        };
        RandPath.__super__.constructor.call(this, func, grad, left, right, step);
      }

      RandPath.prototype.yval = function(i) {
        i = Math.max(Math.min(i, this.yvals.length - 1), 0);
        return this.yvals[i];
      };

      RandPath.make = function(length, amp, freq, step) {
        var i, yvals;
        yvals = (function() {
          var _i, _len, _ref, _results;
          _ref = _.range(0, length + freq, freq);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            _results.push(Math.random() * amp);
          }
          return _results;
        })();
        return new RandPath(yvals, 0, freq, step);
      };

      return RandPath;

    })(Path);
  });

}).call(this);
