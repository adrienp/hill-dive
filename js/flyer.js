// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["paper", "events", "jquery"], function(paper, Events, $) {
    var Flyer, Point, Raster, Size;
    Point = paper.Point, Raster = paper.Raster, Size = paper.Size;
    return Flyer = (function(_super) {

      __extends(Flyer, _super);

      Flyer.prototype.onPath = true;

      Flyer.prototype.minSpeed = 1.5;

      Flyer.prototype.minXVel = 0.3;

      Flyer.prototype.time = 0;

      Flyer.prototype.clock = 0;

      Flyer.prototype.timeStep = 1 / 180;

      Flyer.prototype.remTime = 0;

      Flyer.prototype.upAcc = new Point(0, 5);

      Flyer.prototype.downAcc = new Point(0, 25);

      Flyer.prototype.lastMessage = null;

      function Flyer(path, imgId) {
        var loadImg, src,
          _this = this;
        this.path = path;
        this.downHandler = __bind(this.downHandler, this);

        this.upHandler = __bind(this.upHandler, this);

        Flyer.__super__.constructor.call(this);
        this.pos = this.path.at(this.path.start);
        this.vel = new Point(this.minSpeed, 0);
        this.acc = this.upAcc;
        this.time = 0;
        this.clock = 0;
        this.onPath = true;
        this.remTime = 0;
        this.lastMessage = null;
        loadImg = function() {
          var size;
          _this.raster = new Raster(imgId);
          size = _this.raster.getSize().height;
          if (size > 128) {
            _this.raster.setSize(new Size(128, 128));
            size = 128;
          }
          _this.raster.scale(1 / size);
          _this.raster.rot = 0;
          return _this.draw();
        };
        src = $("#" + imgId).attr('src');
        this.progress = $("<img class='progress' src='" + src + "'>");
        $('#progress').append(this.progress);
        if ($("#" + imgId)[0].complete) {
          loadImg();
        } else {
          $("#" + imgId).load(loadImg);
        }
      }

      Flyer.prototype._go = function() {
        var dt, firstX, func, grad, intersection, pathGrad;
        dt = this.timeStep;
        this.vel = this.vel.add(this.acc.multiply(dt));
        this.vel.x = Math.max(this.vel.x, this.minXVel);
        if (this.vel.getLength() < this.minSpeed) {
          this.vel = this.vel.normalize(this.minSpeed);
        }
        if (this.onPath) {
          pathGrad = this.path.grad(this.pos.x);
          if (pathGrad.getDirectedAngle(this.vel) < 0) {
            this.onPath = false;
          } else {
            this.vel = pathGrad.normalize(this.vel.getLength());
            this.pos = this.path.at(this.pos.add(this.vel.multiply(dt)).x);
          }
        }
        if (!this.onPath) {
          firstX = this.pos.x;
          this.pos = this.pos.add(this.vel.multiply(dt));
          func = this.getFunc();
          intersection = this.path.intersect(func.func, func.grad, firstX, this.pos.x, 0.01);
          if (this.pos.y > this.path.at(this.pos.x).y) {
            grad = new Point(1, func.grad(intersection)).normalize();
            pathGrad = this.path.grad(intersection);
            if (grad.getAngle(pathGrad) < 90) {
              this.vel = this.vel.project(this.path.grad(this.pos.x));
            } else {
              this.vel = new Point(0, 0);
            }
            this.pos = this.path.at(this.pos.x);
            this.onPath = true;
          }
        }
        this.clock += 1;
        this.time = this.clock * this.timeStep;
        if (this.pos.x >= this.path.end) {
          this.finish();
        }
        return this.pos;
      };

      Flyer.prototype.go = function(dt) {
        var i, steps, _i;
        dt += this.remTime;
        steps = Math.floor(dt / this.timeStep);
        for (i = _i = 0; _i < steps; i = _i += 1) {
          this._go();
        }
        this.remTime = dt % this.timeStep;
        this.time += this.remTime;
        if ((this.lastMessage != null) && !this.lastMessage.done && this.lastMessage.time < this.time) {
          console.log("Running postponed message", this.lastMessage);
          return this._doMessage(this.lastMessage);
        }
      };

      Flyer.prototype.goto = function(time) {
        return this.go(time - this.time);
      };

      Flyer.prototype.finish = function() {
        if (!this.finished) {
          this.trigger("finish", this.time);
          return this.finished = true;
        }
      };

      Flyer.prototype.draw = function() {
        var perc, pos, rot;
        if (this.raster) {
          pos = this.getPosition().add(this.vel.rotate(-90).normalize(0.5));
          this.raster.setPosition(pos);
          rot = this.vel.angle - this.raster.rot;
          this.raster.rotate(rot);
          this.raster.rot += rot;
        }
        perc = (this.pos.x - this.path.start) * 100 / (this.path.end - this.path.start);
        return this.progress.css('left', "" + perc + "%");
      };

      Flyer.prototype.getPosition = function() {
        return this.pos.add(this.vel.multiply(this.remTime));
      };

      Flyer.prototype.upHandler = function(e) {
        e.preventDefault();
        this.acc = this.upAcc;
        return this.trigger("msg", {
          state: "up",
          pos: this.pos,
          vel: this.vel,
          time: this.time,
          onPath: this.onPath
        });
      };

      Flyer.prototype.downHandler = function(e) {
        e.preventDefault();
        this.acc = this.downAcc;
        return this.trigger("msg", {
          state: "down",
          pos: this.pos,
          vel: this.vel,
          time: this.time,
          onPath: this.onPath
        });
      };

      Flyer.prototype._doMessage = function(msg) {
        var gotoTime;
        msg.done = true;
        this.pos = new Point(msg.pos.x, msg.pos.y);
        this.vel = new Point(msg.vel.x, msg.vel.y);
        this.onPath = msg.onPath;
        if (msg.state === "down") {
          this.acc = this.downAcc;
        } else {
          this.acc = this.upAcc;
        }
        gotoTime = this.time;
        this.time = msg.time;
        this.clock = Math.floor(this.time / this.timeStep);
        this.remTime = this.time % this.timeStep;
        this.goto(gotoTime);
        return console.log("Time before:", gotoTime, "Msg:", msg.time, "Now:", this.time);
      };

      Flyer.prototype.receive = function(msg) {
        if (!this.lastMessage || this.lastMessage.time < msg.time) {
          if (msg.time < this.time) {
            this._doMessage(msg);
          } else {
            console.log("Postponed message. Time:", this.time, "Message:", msg);
          }
          return this.lastMessage = msg;
        } else {
          return console.log("Out of order messages.", this.lastMessage, msg);
        }
      };

      Flyer.prototype.setupControl = function(el) {
        var $el;
        $el = $(el);
        return $el.on({
          "mousedown touchstart keydown": this.downHandler,
          "mouseup touchend keyup": this.upHandler
        });
      };

      Flyer.prototype.finishControl = function(el) {
        var $el;
        $el = $(el);
        return $el.off({
          "mousedown touchstart keydown": this.downHandler,
          "mouseup touchend keyup": this.upHandler
        });
      };

      Flyer.prototype.remove = function() {
        this.raster.remove();
        return this.progress.remove();
      };

      Flyer.prototype.getFunc = function() {
        var a, b, c, grad;
        a = 1 / (2 * this.vel.x * this.vel.x);
        grad = this.vel.y * (1 / this.vel.x);
        b = grad - a * 2 * this.pos.x;
        c = this.pos.y - a * this.pos.x * this.pos.x - b * this.pos.x;
        return {
          func: function(x) {
            return a * x * x + b * x + c;
          },
          grad: function(x) {
            return 2 * a * x + b;
          }
        };
      };

      return Flyer;

    })(Events);
  });

}).call(this);
