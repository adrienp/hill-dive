// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["jquery", "underscore", "flyer", "randpath"], function($, _, Flyer, RandPath) {
    var Game;
    return Game = (function() {

      Game.prototype.flyerImages = ["blue", "yellow", "red", "green"];

      Game.prototype.results = {};

      Game.prototype.flyers = {};

      Game.prototype.users = {};

      Game.prototype.numUsers = 0;

      Game.prototype.time = 0;

      Game.prototype.count = 0;

      Game.prototype.going = false;

      function Game(gid, user, data, channel, canvas) {
        this.gid = gid;
        this.user = user;
        this.channel = channel;
        this.canvas = canvas;
        this.done = __bind(this.done, this);

        this.otherFinish = __bind(this.otherFinish, this);

        this.otherFly = __bind(this.otherFly, this);

        this.meFinish = __bind(this.meFinish, this);

        this.meMsg = __bind(this.meMsg, this);

        this.start = __bind(this.start, this);

        this.onFrame = __bind(this.onFrame, this);

        this.results = {};
        this.flyers = {};
        this.users = {};
        this.numUsers = 0;
        this.time = 0;
        this.count = 0;
        this.going = false;
        if (data instanceof RandPath) {
          this.path = data;
        } else {
          this.path = new RandPath(data.yvals, data.left, data.freq, data.step);
        }
        this.me = new Flyer(this.path, this.flyerImages[0]);
        this.flyers[this.user.uid] = this.me;
        this.numUsers += 1;
        this.users[this.user.uid] = this.user;
        this.me.on("msg", this.meMsg);
        this.me.on("finish", this.meFinish);
        this.me.setupControl(window);
        this.channel.on("start", this.start);
        this.channel.on("fly", this.otherFly);
        this.channel.on("finish", this.otherFinish);
        this.channel.on("done", this.done);
        this.canvas.path = this.path;
        this.canvas.focus = this.me;
        this.going = false;
        this.canvas.view.setOnFrame(this.onFrame);
        this.canvas.draw();
      }

      Game.prototype.onFrame = function(e) {
        var flyer, fps, uid, _ref;
        if (this.going) {
          _ref = this.flyers;
          for (uid in _ref) {
            flyer = _ref[uid];
            flyer.go(Math.min(e.delta, 5));
            flyer.draw();
          }
        }
        this.canvas.draw();
        this.count += 1;
        this.time += e.delta;
        if (this.time > 1) {
          fps = Math.round(this.count * 10 / this.time) / 10;
          $('#fps').html(fps + " fps");
          this.count = 0;
          return this.time = 0;
        }
      };

      Game.prototype.addFlyer = function(user) {
        var flyer;
        this.users[user.uid] = user;
        flyer = new Flyer(this.path, this.flyerImages[this.numUsers % this.flyerImages.length]);
        this.flyers[user.uid] = flyer;
        return this.numUsers += 1;
      };

      Game.prototype.start = function() {
        this.going = true;
        return $('#panel').hide();
      };

      Game.prototype.meMsg = function(msg) {
        var url;
        if (this.going) {
          url = "/games/" + this.gid + "/" + this.user.uid;
          console.log("Posting", msg, "to", url);
          return $.post(url, {
            msg: JSON.stringify(msg)
          });
        }
      };

      Game.prototype.meFinish = function(time) {
        var url;
        console.trace();
        url = "/games/" + this.gid + "/" + this.user.uid + "/finish";
        console.log("Posting finish", time, "to", url);
        $.post(url, {
          time: time
        });
        this.canvas.focus = null;
        this.results[this.user.uid] = {
          name: this.user.name,
          time: time
        };
        $('#panel > div').removeClass('current');
        $('#results').addClass('current');
        this.renderResults();
        $('#panel').show();
        this.me.off("msg", this.meMsg);
        return this.me.off("finish", this.meFinish);
      };

      Game.prototype.renderResults = function() {
        var k, result, results, time, v, _i, _len, _results;
        results = _.sortBy((function() {
          var _ref, _results;
          _ref = this.results;
          _results = [];
          for (k in _ref) {
            v = _ref[k];
            _results.push(v);
          }
          return _results;
        }).call(this), function(result) {
          return result.time;
        });
        $('#result-list').empty();
        _results = [];
        for (_i = 0, _len = results.length; _i < _len; _i++) {
          result = results[_i];
          time = Math.round(result.time * 10) / 10;
          _results.push($('#result-list').append("<li>" + result.name + ": " + time + " s</li>"));
        }
        return _results;
      };

      Game.prototype.otherFly = function(msg) {
        return this.flyers[msg.uid].receive(msg.msg);
      };

      Game.prototype.otherFinish = function(msg) {
        this.results[msg.uid] = {
          name: this.users[msg.uid].name,
          time: msg.time
        };
        return this.renderResults();
      };

      Game.prototype.done = function(msg) {
        var flyer, time, uid, _ref, _ref1;
        console.log("Done");
        this.results = {};
        _ref = msg.results;
        for (uid in _ref) {
          time = _ref[uid];
          this.results[uid] = {
            name: this.users[uid].name,
            time: time
          };
        }
        this.renderResults();
        this.canvas.view.setOnFrame(null);
        _ref1 = this.flyers;
        for (uid in _ref1) {
          flyer = _ref1[uid];
          flyer.remove();
        }
        this.path.remove();
        this.canvas.clear();
        this.canvas.view.draw();
        this.me.finishControl(window);
        this.channel.off("start", this.start);
        this.channel.off("fly", this.otherFly);
        this.channel.off("finish", this.otherFinish);
        return this.channel.off("done", this.done);
      };

      return Game;

    })();
  });

}).call(this);
