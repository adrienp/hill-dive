// Generated by CoffeeScript 1.4.0
(function() {

  define(["goog", "jquery"], function(goog, $) {
    var Channel;
    return Channel = (function() {

      function Channel(name) {
        var _this = this;
        this.events = {};
        $.post('/connect', {
          name: name
        }, function(resp) {
          if (resp.success) {
            _this.token = resp.token;
            _this.uid = resp.uid;
            _this.channel = new goog.appengine.Channel(token);
            _this.socket = _this.channel.open();
            _this.socket.onopen = function() {
              return console.log("Socket Opened:", uid);
            };
            _this.socket.onmessage = function(msg) {
              msg = JSON.parse(msg.data);
              return _this.trigger(msg.type, msg);
            };
            _this.socket.onerror = function(e) {
              return console.error(e.code + ": " + e.description);
            };
            return _this.socket.onclose = function() {
              return console.log("Socket Closed");
            };
          }
        });
      }

      Channel.prototype.trigger = function(eventType, msg) {
        var fn, _i, _len, _ref, _results;
        if (eventType in this.events) {
          _ref = this.events[eventType];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            fn = _ref[_i];
            _results.push(fn(msg));
          }
          return _results;
        }
      };

      Channel.prototype.on = function(eventType, fn) {
        if (!(eventType in this.events)) {
          this.events[eventType] = [];
        }
        return this.events[eventType].push(fn);
      };

      Channel.prototype.off = function(eventType, fn) {
        var i, _ref;
        i = (_ref = this.events[eventType]) != null ? _ref.indexOf(fn) : void 0;
        if ((i != null) >= 0) {
          return this.events[eventType].splice(i, 1);
        }
      };

      return Channel;

    })();
  });

}).call(this);
